- name: Get back build
  ansible.builtin.get_url:
    url: "{{ download_url }}"
    dest: /tmp/back.zip

- name: Ensure tmp directory exists
  ansible.builtin.file:
    path: /tmp/back
    state: directory

- name: Unzip back build
  ansible.builtin.unarchive:
    src: /tmp/back.zip
    dest: "/tmp/back"
    remote_src: yes

- name: Remove old back build
  ansible.builtin.file:
    path: "{{ app_path }}"
    state: absent

- name: Move back build
  ansible.builtin.copy:
    src: "/tmp/back/"
    dest: "{{ app_path }}"
    remote_src: yes

- name: Add .env file
  copy:
    src: "./templates/.env.template"
    dest: "{{ app_path }}/.env"

- name: Replace variables in .env
  replace:
    path: "{{ app_path }}/.env"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.value }}"
  loop:
    - { regexp: '\$HOST', value: "{{ host }}" }
    - { regexp: '\$DB_HOST', value: "{{ db_host }}" }
    - { regexp: '\$DB_PORT', value: "{{ db_port }}" }
    - { regexp: '\$DB_DATABASE', value: "{{ db_database }}" }
    - { regexp: '\$DB_USERNAME', value: "{{ db_username }}" }

- name: Config cache
  ansible.builtin.command: "php artisan config:cache"
  args:
    chdir: "{{ app_path }}"
# - name: Remove .env
#     ansible.builtin.file:
#       path: "{{ app_path }}/.env"
#       state: absent
